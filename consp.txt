/**
  @Test - у JUnit есть свой метод мейн и он исполняет методы, помеченные аннотацией @Test

  @DisplayName("название_моего_теста") - аннотация для названия метода теста, эта аннотация интегрирована с Allure,
  если она над классом, то это будет названием test suit-а

  @Disabled (название или ID) - для отключения тестов, чтобы их не коментировать, если над классом, то дизейблит все тесты

  @BeforeEach - для выноса чего-то общего из тестов, например, preconditions

  @Tag - для того, чтобы запускать тесты с отдельными тегами, например:
  @Tags({
    @Tag("BLOCKER")
    @Tag("WEB")
  })

  @ParametrizedTest - говорит о том, что у нас будет тест с параметрами
  у этой аннотации можно сделать так name="имя теста {n}", где {n} - номер аргумента метода теста (начиная с 0)

  @ValueSource - говотит откуда у нас будут браться параметры для тестов (дата провайдер)
  передает только 1 параметр (например 1 массив)
      @ValueSource(strings = {
              "Selenide",
              "Allure"
      })

  @CsvSource - для передачи в параметры теста более чем 1 аргумента
      @CsvSource(value = {
              "Selenide,          1",
              "Allure,            2"
      })
      если нам нужен другой разделитель вместо запятой, тогда после {} нужно указать delimetr = '|' или ';'
            @CsvSource(value = {
                    "Selenide;          1",
                    "Allure;            2"
            }, delimetr = ';')
            аналогично для CsvFileSource
      либо можно сделать в папке resources файл Csv и заполнить его данными, в таком случае
      аннтотация будет @CsvFileSource(resources = "/testdata/forstSearchResultShouldContainExpectedResult.csv")


      @MethodSource - специальный метод для передачи сложных данных (может вернуть любые java объекты)
      метод имеет во всех случаях схожую структуру:
          static Stream<Arguments> dataProvider() {
              return Stream.of(
                      Arguments.of(),
                      Arguments.of()
                      ...
              );
          }
      Если название метода совпадает с названием метода теста, тогда все ОК, если у нас кастомное название метода, тогда
      в аннотации @MethodSource, которая стоит над тестом прописываем @MethodSource("dataProvider")


**/